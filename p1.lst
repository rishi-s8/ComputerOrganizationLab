     1                                  %include "io.mac" 
     1                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     2                              <1> extern   proc_GetStr, proc_GetCh
     3                              <1> extern   proc_PutInt, proc_GetInt
     4                              <1> extern   proc_PutLInt, proc_GetLInt
     5                              <1> 
     6                              <1> ;;-------------------------------------------------------------------
     7                              <1> %macro  .STARTUP  0
     8                              <1> ;group dgroup .data .bss
     9                              <1>         global   _start
    10                              <1> _start:
    11                              <1> %endmacro
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> 
    14                              <1> 
    15                              <1> ;;-------------------------------------------------------------------
    16                              <1> %macro  .EXIT  0
    17                              <1>         mov    EAX,1
    18                              <1>         xor    EBX,EBX
    19                              <1>         int    0x80
    20                              <1> %endmacro
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> 
    23                              <1> 
    24                              <1> ;;-------------------------------------------------------------------
    25                              <1> %macro  .DATA 0
    26                              <1>         segment .data
    27                              <1> %endmacro
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .UDATA 0
    32                              <1>         segment .bss
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .CODE 0
    38                              <1>         segment .data
    39                              <1>         segment .bss
    40                              <1>         segment .text
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> 
    45                              <1> ;;-------------------------------------------------------------------
    46                              <1> %macro  nwln  0 
    47                              <1>         call    proc_nwln
    48                              <1> %endmacro
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> 
    51                              <1> 
    52                              <1> ;;-------------------------------------------------------------------
    53                              <1> %macro  PutCh  1 
    54                              <1>         push    AX
    55                              <1>         mov     AL,%1
    56                              <1>         call    proc_PutCh
    57                              <1>         pop     AX
    58                              <1> %endmacro
    59                              <1> ;;-------------------------------------------------------------------
    60                              <1> 
    61                              <1> 
    62                              <1> ;;-------------------------------------------------------------------
    63                              <1> %macro  PutStr  1 
    64                              <1>         push    ECX
    65                              <1>         mov     ECX,%1
    66                              <1>         call    proc_PutStr
    67                              <1>         pop     ECX
    68                              <1> %endmacro
    69                              <1> ;;-------------------------------------------------------------------
    70                              <1> 
    71                              <1> 
    72                              <1> ;;-------------------------------------------------------------------
    73                              <1> %macro  GetStr  1-2 81
    74                              <1>         push    ESI
    75                              <1>         push    EDI
    76                              <1>         mov     EDI,%1
    77                              <1>         mov     ESI,%2
    78                              <1>         call    proc_GetStr
    79                              <1>         pop     EDI
    80                              <1>         pop     ESI
    81                              <1> %endmacro
    82                              <1> ;;-------------------------------------------------------------------
    83                              <1> 
    84                              <1> 
    85                              <1> ;;-------------------------------------------------------------------
    86                              <1> %macro  GetCh   1
    87                              <1>         push    SI
    88                              <1>         xor     SI,SI
    89                              <1> %ifidni %1,AL
    90                              <1>         ;inc     SI
    91                              <1>         call    proc_GetCh
    92                              <1> %elifidni %1,AH
    93                              <1>         mov     SI,1
    94                              <1>         call    proc_GetCh
    95                              <1> %else
    96                              <1>         push    AX
    97                              <1>         call    proc_GetCh
    98                              <1>         mov     %1,AL
    99                              <1>         pop     AX
   100                              <1> %endif
   101                              <1>         pop     SI
   102                              <1> %endmacro
   103                              <1> ;;-------------------------------------------------------------------
   104                              <1> 
   105                              <1> 
   106                              <1> ;;-------------------------------------------------------------------
   107                              <1> %macro  PutInt  1
   108                              <1>         push    AX
   109                              <1>         mov     AX,%1
   110                              <1>         call    proc_PutInt
   111                              <1>         pop     AX
   112                              <1> %endmacro
   113                              <1> ;;-------------------------------------------------------------------
   114                              <1> 
   115                              <1> 
   116                              <1> ;;-------------------------------------------------------------------
   117                              <1> %macro  GetInt  1
   118                              <1> %ifnidni %1,AX
   119                              <1>         push    AX
   120                              <1>         call    proc_GetInt
   121                              <1>         mov     %1,AX
   122                              <1> 	  pop     AX
   123                              <1> %else 
   124                              <1>         call  proc_GetInt
   125                              <1> %endif
   126                              <1> %endmacro
   127                              <1> ;;-------------------------------------------------------------------
   128                              <1> 
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> %macro  PutLInt  1
   131                              <1>         push    EAX
   132                              <1>         mov     EAX,%1
   133                              <1>         call    proc_PutLInt
   134                              <1>         pop     EAX
   135                              <1> %endmacro
   136                              <1> ;;-------------------------------------------------------------------
   137                              <1> 
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> %macro  GetLInt  1
   140                              <1> %ifnidni %1,EAX
   141                              <1>         push    EAX
   142                              <1>         call    proc_GetLInt
   143                              <1>         mov     %1,EAX
   144                              <1> 	  pop     EAX
   145                              <1> %else 
   146                              <1>         call  proc_GetLInt
   147                              <1> %endif
   148                              <1> %endmacro
   149                              <1> ;;-------------------------------------------------------------------
   150                              <1> 
     2                                  
     3                                  .DATA
     3                              <1>  segment .data
     4 00000000 456E74657220746865-         prompt_msg  db  "Enter the string: ",0      ; This is the prompt message
     4 00000009 20737472696E673A20-
     4 00000012 00                 
     5 00000013 456E63727970746564-         output_msg  db  "Encrypted string: ",0      ; This is the output message
     5 0000001C 20737472696E673A20-
     5 00000025 00                 
     6 00000026 576F756C6420746861-         cont_msg    db  "Would that be all? ",0     ; Confirmation prompt
     6 0000002F 7420626520616C6C3F-
     6 00000038 2000               
     7                                  
     8                                  .UDATA
     8                              <1>  segment .bss
     9 00000000 <res 000003E8>              string  resb    1000                     ; Input String
    10 000003E8 <res 00000001>              conf    resb    1                           ; Confirmation character
    11                                  
    12                                  .CODE
    12                              <1>  segment .data
    12                              <1>  segment .bss
    12                              <1>  segment .text
    13                                          .STARTUP
    13                              <1> 
    13                              <1>  global _start
    13                              <1> _start:
    14                                              encrypt:
    15                                                  PutStr prompt_msg                       ; request string
    15 00000000 51                  <1>  push ECX
    15 00000001 B9[00000000]        <1>  mov ECX,%1
    15 00000006 E8(00000000)        <1>  call proc_PutStr
    15 0000000B 59                  <1>  pop ECX
    16                                                  GetStr string, 100                 ; string input
    16 0000000C 56                  <1>  push ESI
    16 0000000D 57                  <1>  push EDI
    16 0000000E BF[00000000]        <1>  mov EDI,%1
    16 00000013 BE64000000          <1>  mov ESI,%2
    16 00000018 E8(00000000)        <1>  call proc_GetStr
    16 0000001D 5F                  <1>  pop EDI
    16 0000001E 5E                  <1>  pop ESI
    17 0000001F BB[00000000]                            mov EBX, string
    18                                                  PutStr output_msg
    18 00000024 51                  <1>  push ECX
    18 00000025 B9[13000000]        <1>  mov ECX,%1
    18 0000002A E8(00000000)        <1>  call proc_PutStr
    18 0000002F 59                  <1>  pop ECX
    19                                                  repeat:
    20 00000030 8A03                                        mov AL, [EBX] 
    21 00000032 3C00                                        cmp AL, 0
    22 00000034 742A                                        je encrypted
    23 00000036 3C30                                        cmp AL, '0'
    24 00000038 7C18                                        jl continue
    25 0000003A 3C39                                        cmp AL, '9'
    26 0000003C 7F14                                        jg continue
    27 0000003E 7406                                        je encrypt9
    28 00000040 3C32                                        cmp AL, '2'
    29 00000042 7E06                                        jle encrypt0_2
    30 00000044 7F08                                        jg encrypt3_8
    31                                                  
    32                                                  encrypt9:
    33 00000046 B030                                        mov AL, '0'
    34 00000048 EB08                                        jmp continue
    35                                                  
    36                                                  encrypt0_2:
    37 0000004A 0428                                        add AL, 40
    38 0000004C EB04                                        jmp continue
    39                                                  
    40                                                  encrypt3_8:
    41 0000004E 040E                                        add AL, 14
    42 00000050 EB00                                        jmp continue
    43                                  
    44                                                  continue:
    45                                                      PutCh AL
    45 00000052 6650                <1>  push AX
    45 00000054 88C0                <1>  mov AL,%1
    45 00000056 E8(00000000)        <1>  call proc_PutCh
    45 0000005B 6658                <1>  pop AX
    46 0000005D 43                                          inc EBX
    47 0000005E EBD0                                        jmp repeat
    48                                  
    49                                                  
    50                                                  encrypted: 
    51                                                      nwln
    51 00000060 E8(00000000)        <1>  call proc_nwln
    52                                                      PutStr cont_msg
    52 00000065 51                  <1>  push ECX
    52 00000066 B9[26000000]        <1>  mov ECX,%1
    52 0000006B E8(00000000)        <1>  call proc_PutStr
    52 00000070 59                  <1>  pop ECX
    53                                                      GetCh BL
    53 00000071 6656                <1>  push SI
    53 00000073 6631F6              <1>  xor SI,SI
    53                              <1> %ifidni %1,AL
    53                              <1> 
    53                              <1>  call proc_GetCh
    53                              <1> %elifidni %1,AH
    53                              <1>  mov SI,1
    53                              <1>  call proc_GetCh
    53                              <1> %else
    53 00000076 6650                <1>  push AX
    53 00000078 E8(00000000)        <1>  call proc_GetCh
    53 0000007D 88C3                <1>  mov %1,AL
    53 0000007F 6658                <1>  pop AX
    53                              <1> %endif
    53 00000081 665E                <1>  pop SI
    54 00000083 80FB59                                      cmp BL, 'Y'
    55 00000086 740A                                        je done
    56 00000088 80FB79                                      cmp BL, 'y'
    57 0000008B 7405                                        je done
    58 0000008D E96EFFFFFF                                  jmp encrypt
    59                                  
    60                                              done:
    61                                                  .EXIT    
    61 00000092 B801000000          <1>  mov EAX,1
    61 00000097 31DB                <1>  xor EBX,EBX
    61 00000099 CD80                <1>  int 0x80
