     1                                  ;Test routine for GetPut.asm      
     2                                  ;
     3                                  ;       Objective: find the sum of two numbers 
     4                                  ;       Input: Requests two  integers  from the user.
     5                                  ;       Output: Outputs the input number.
     6                                  %include "io.mac"
     7                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     8                              <1> extern   proc_GetStr, proc_GetCh
     9                              <1> extern   proc_PutInt, proc_GetInt
    10                              <1> extern   proc_PutLInt, proc_GetLInt
    11                              <1> 
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> %macro  .STARTUP  0
    14                              <1> ;group dgroup .data .bss
    15                              <1>         global   _start
    16                              <1> _start:
    17                              <1> %endmacro
    18                              <1> ;;-------------------------------------------------------------------
    19                              <1> 
    20                              <1> 
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> %macro  .EXIT  0
    23                              <1>         mov    EAX,1
    24                              <1>         xor    EBX,EBX
    25                              <1>         int    0x80
    26                              <1> %endmacro
    27                              <1> ;;-------------------------------------------------------------------
    28                              <1> 
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .DATA 0
    32                              <1>         segment .data
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .UDATA 0
    38                              <1>         segment .bss
    39                              <1> %endmacro
    40                              <1> ;;-------------------------------------------------------------------
    41                              <1> 
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> %macro  .CODE 0
    44                              <1>         segment .data
    45                              <1>         segment .bss
    46                              <1>         segment .text
    47                              <1> %endmacro
    48                              <1> ;;-------------------------------------------------------------------
    49                              <1> 
    50                              <1> 
    51                              <1> ;;-------------------------------------------------------------------
    52                              <1> %macro  nwln  0 
    53                              <1>         call    proc_nwln
    54                              <1> %endmacro
    55                              <1> ;;-------------------------------------------------------------------
    56                              <1> 
    57                              <1> 
    58                              <1> ;;-------------------------------------------------------------------
    59                              <1> %macro  PutCh  1 
    60                              <1>         push    AX
    61                              <1>         mov     AL,%1
    62                              <1>         call    proc_PutCh
    63                              <1>         pop     AX
    64                              <1> %endmacro
    65                              <1> ;;-------------------------------------------------------------------
    66                              <1> 
    67                              <1> 
    68                              <1> ;;-------------------------------------------------------------------
    69                              <1> %macro  PutStr  1 
    70                              <1>         push    ECX
    71                              <1>         mov     ECX,%1
    72                              <1>         call    proc_PutStr
    73                              <1>         pop     ECX
    74                              <1> %endmacro
    75                              <1> ;;-------------------------------------------------------------------
    76                              <1> 
    77                              <1> 
    78                              <1> ;;-------------------------------------------------------------------
    79                              <1> %macro  GetStr  1-2 81
    80                              <1>         push    ESI
    81                              <1>         push    EDI
    82                              <1>         mov     EDI,%1
    83                              <1>         mov     ESI,%2
    84                              <1>         call    proc_GetStr
    85                              <1>         pop     EDI
    86                              <1>         pop     ESI
    87                              <1> %endmacro
    88                              <1> ;;-------------------------------------------------------------------
    89                              <1> 
    90                              <1> 
    91                              <1> ;;-------------------------------------------------------------------
    92                              <1> %macro  GetCh   1
    93                              <1>         push    SI
    94                              <1>         xor     SI,SI
    95                              <1> %ifidni %1,AL
    96                              <1>         ;inc     SI
    97                              <1>         call    proc_GetCh
    98                              <1> %elifidni %1,AH
    99                              <1>         mov     SI,1
   100                              <1>         call    proc_GetCh
   101                              <1> %else
   102                              <1>         push    AX
   103                              <1>         call    proc_GetCh
   104                              <1>         mov     %1,AL
   105                              <1>         pop     AX
   106                              <1> %endif
   107                              <1>         pop     SI
   108                              <1> %endmacro
   109                              <1> ;;-------------------------------------------------------------------
   110                              <1> 
   111                              <1> 
   112                              <1> ;;-------------------------------------------------------------------
   113                              <1> %macro  PutInt  1
   114                              <1>         push    AX
   115                              <1>         mov     AX,%1
   116                              <1>         call    proc_PutInt
   117                              <1>         pop     AX
   118                              <1> %endmacro
   119                              <1> ;;-------------------------------------------------------------------
   120                              <1> 
   121                              <1> 
   122                              <1> ;;-------------------------------------------------------------------
   123                              <1> %macro  GetInt  1
   124                              <1> %ifnidni %1,AX
   125                              <1>         push    AX
   126                              <1>         call    proc_GetInt
   127                              <1>         mov     %1,AX
   128                              <1> 	  pop     AX
   129                              <1> %else 
   130                              <1>         call  proc_GetInt
   131                              <1> %endif
   132                              <1> %endmacro
   133                              <1> ;;-------------------------------------------------------------------
   134                              <1> 
   135                              <1> ;;-------------------------------------------------------------------
   136                              <1> %macro  PutLInt  1
   137                              <1>         push    EAX
   138                              <1>         mov     EAX,%1
   139                              <1>         call    proc_PutLInt
   140                              <1>         pop     EAX
   141                              <1> %endmacro
   142                              <1> ;;-------------------------------------------------------------------
   143                              <1> 
   144                              <1> ;;-------------------------------------------------------------------
   145                              <1> %macro  GetLInt  1
   146                              <1> %ifnidni %1,EAX
   147                              <1>         push    EAX
   148                              <1>         call    proc_GetLInt
   149                              <1>         mov     %1,EAX
   150                              <1> 	  pop     EAX
   151                              <1> %else 
   152                              <1>         call  proc_GetLInt
   153                              <1> %endif
   154                              <1> %endmacro
   155                              <1> ;;-------------------------------------------------------------------
   156                              <1> 
   157                                  
   158                                  .DATA
   159                              <1>  segment .data
   160 00000000 506C6561736520696E-     prompt_msg1  db   "Please input the first number : ",0
   161 00000009 707574207468652066-
   162 00000012 69727374206E756D62-
   163 0000001B 6572203A2000       
   164 00000021 FE12                    n1 dw   4862  
   165 00000023 AB11                    n2 dw   4523 
   166                                  .UDATA 
   167                              <1>  segment .bss
   168 00000000 <res 000014FC>          number1   resd   1343 
   169 000014FC <res 00000218>          number2   resd   134
   170                                  
   171                                  .CODE
   172                              <1>  segment .data
   173                              <1>  segment .bss
   174                              <1>  segment .text
   175                                        .STARTUP
   176                              <1> 
   177                              <1>  global _start
   178                              <1> _start:
   179 00000000 66A3[FC140000]            mov  [number2], AX 
   180 00000006 668B0D[21000000]        L1     mov cx, [n1]
   181 0000000D 668B15[23000000]             mov dx,[n2]
   182 00000014 66FF35[23000000]             push word [n1+2]
   183 0000001B E81E000000                   call P1
   184 00000020 FEC1                         inc CL
   185 00000022 EBE2                         jmp  L1
   186                                      PutInt  AX  
   187 00000024 6650                <1>  push AX
   188 00000026 6689C0              <1>  mov AX,%1
   189 00000029 E8(00000000)        <1>  call proc_PutInt
   190 0000002E 6658                <1>  pop AX
   191 00000030 E810000000                 call P2  
   192                                  done:
   193                                        .EXIT
   194 00000035 B801000000          <1>  mov EAX,1
   195 0000003A 31DB                <1>  xor EBX,EBX
   196 0000003C CD80                <1>  int 0x80
   197                                  
   198                                  
   199                                  
   200                                  ; -----------------------------------------------------
   201                                  ; Procedure sum receives two integers in CX  and DX 
   202                                  ; The sum of the two integers is returned in AX 
   203                                  ;-------------------------------------------
   204                                  P1:
   205 0000003E 6689C8                    mov AX, CX   ; sum= first number
   206 00000041 6601D0                    add AX,DX    ; sum=sum+second number 
   207 00000044 C3                        ret
   208                                  
   209                                    
   210                                  
   211                                  P2:
   212 00000045 66B90500                            mov cx, 5
   213 00000049 66BA0A00                            mov dx, 10
   214 0000004D E8ECFFFFFF                          call P1 
   215 00000052 6683C105                           add cx,5 
   216 00000056 80C101                              add CL,1  
   217                                           PutInt   AX
   218 00000059 6650                <1>  push AX
   219 0000005B 6689C0              <1>  mov AX,%1
   220 0000005E E8(00000000)        <1>  call proc_PutInt
   221 00000063 6658                <1>  pop AX
   222 00000065 C3                      ret 
   223                                   
   224                                  
   225                                  
   226                                  
   227                                  
   228                                  
   229                                  
