     1                                  ;
     2                                  ;       Objective: find the sum of two numbers 
     3                                  ;       Input: Requests two  integers  from the user.
     4                                  ;       Output: Outputs the input number.
     5                                  %include "io.mac"
     6                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     7                              <1> extern   proc_GetStr, proc_GetCh
     8                              <1> extern   proc_PutInt, proc_GetInt
     9                              <1> extern   proc_PutLInt, proc_GetLInt
    10                              <1> 
    11                              <1> ;;-------------------------------------------------------------------
    12                              <1> %macro  .STARTUP  0
    13                              <1> ;group dgroup .data .bss
    14                              <1>         global   _start
    15                              <1> _start:
    16                              <1> %endmacro
    17                              <1> ;;-------------------------------------------------------------------
    18                              <1> 
    19                              <1> 
    20                              <1> ;;-------------------------------------------------------------------
    21                              <1> %macro  .EXIT  0
    22                              <1>         mov    EAX,1
    23                              <1>         xor    EBX,EBX
    24                              <1>         int    0x80
    25                              <1> %endmacro
    26                              <1> ;;-------------------------------------------------------------------
    27                              <1> 
    28                              <1> 
    29                              <1> ;;-------------------------------------------------------------------
    30                              <1> %macro  .DATA 0
    31                              <1>         segment .data
    32                              <1> %endmacro
    33                              <1> ;;-------------------------------------------------------------------
    34                              <1> 
    35                              <1> ;;-------------------------------------------------------------------
    36                              <1> %macro  .UDATA 0
    37                              <1>         segment .bss
    38                              <1> %endmacro
    39                              <1> ;;-------------------------------------------------------------------
    40                              <1> 
    41                              <1> ;;-------------------------------------------------------------------
    42                              <1> %macro  .CODE 0
    43                              <1>         segment .data
    44                              <1>         segment .bss
    45                              <1>         segment .text
    46                              <1> %endmacro
    47                              <1> ;;-------------------------------------------------------------------
    48                              <1> 
    49                              <1> 
    50                              <1> ;;-------------------------------------------------------------------
    51                              <1> %macro  nwln  0 
    52                              <1>         call    proc_nwln
    53                              <1> %endmacro
    54                              <1> ;;-------------------------------------------------------------------
    55                              <1> 
    56                              <1> 
    57                              <1> ;;-------------------------------------------------------------------
    58                              <1> %macro  PutCh  1 
    59                              <1>         push    AX
    60                              <1>         mov     AL,%1
    61                              <1>         call    proc_PutCh
    62                              <1>         pop     AX
    63                              <1> %endmacro
    64                              <1> ;;-------------------------------------------------------------------
    65                              <1> 
    66                              <1> 
    67                              <1> ;;-------------------------------------------------------------------
    68                              <1> %macro  PutStr  1 
    69                              <1>         push    ECX
    70                              <1>         mov     ECX,%1
    71                              <1>         call    proc_PutStr
    72                              <1>         pop     ECX
    73                              <1> %endmacro
    74                              <1> ;;-------------------------------------------------------------------
    75                              <1> 
    76                              <1> 
    77                              <1> ;;-------------------------------------------------------------------
    78                              <1> %macro  GetStr  1-2 81
    79                              <1>         push    ESI
    80                              <1>         push    EDI
    81                              <1>         mov     EDI,%1
    82                              <1>         mov     ESI,%2
    83                              <1>         call    proc_GetStr
    84                              <1>         pop     EDI
    85                              <1>         pop     ESI
    86                              <1> %endmacro
    87                              <1> ;;-------------------------------------------------------------------
    88                              <1> 
    89                              <1> 
    90                              <1> ;;-------------------------------------------------------------------
    91                              <1> %macro  GetCh   1
    92                              <1>         push    SI
    93                              <1>         xor     SI,SI
    94                              <1> %ifidni %1,AL
    95                              <1>         ;inc     SI
    96                              <1>         call    proc_GetCh
    97                              <1> %elifidni %1,AH
    98                              <1>         mov     SI,1
    99                              <1>         call    proc_GetCh
   100                              <1> %else
   101                              <1>         push    AX
   102                              <1>         call    proc_GetCh
   103                              <1>         mov     %1,AL
   104                              <1>         pop     AX
   105                              <1> %endif
   106                              <1>         pop     SI
   107                              <1> %endmacro
   108                              <1> ;;-------------------------------------------------------------------
   109                              <1> 
   110                              <1> 
   111                              <1> ;;-------------------------------------------------------------------
   112                              <1> %macro  PutInt  1
   113                              <1>         push    AX
   114                              <1>         mov     AX,%1
   115                              <1>         call    proc_PutInt
   116                              <1>         pop     AX
   117                              <1> %endmacro
   118                              <1> ;;-------------------------------------------------------------------
   119                              <1> 
   120                              <1> 
   121                              <1> ;;-------------------------------------------------------------------
   122                              <1> %macro  GetInt  1
   123                              <1> %ifnidni %1,AX
   124                              <1>         push    AX
   125                              <1>         call    proc_GetInt
   126                              <1>         mov     %1,AX
   127                              <1> 	  pop     AX
   128                              <1> %else 
   129                              <1>         call  proc_GetInt
   130                              <1> %endif
   131                              <1> %endmacro
   132                              <1> ;;-------------------------------------------------------------------
   133                              <1> 
   134                              <1> ;;-------------------------------------------------------------------
   135                              <1> %macro  PutLInt  1
   136                              <1>         push    EAX
   137                              <1>         mov     EAX,%1
   138                              <1>         call    proc_PutLInt
   139                              <1>         pop     EAX
   140                              <1> %endmacro
   141                              <1> ;;-------------------------------------------------------------------
   142                              <1> 
   143                              <1> ;;-------------------------------------------------------------------
   144                              <1> %macro  GetLInt  1
   145                              <1> %ifnidni %1,EAX
   146                              <1>         push    EAX
   147                              <1>         call    proc_GetLInt
   148                              <1>         mov     %1,EAX
   149                              <1> 	  pop     EAX
   150                              <1> %else 
   151                              <1>         call  proc_GetLInt
   152                              <1> %endif
   153                              <1> %endmacro
   154                              <1> ;;-------------------------------------------------------------------
   155                              <1> 
   156                                  
   157                                  .DATA
   158                              <1>  segment .data
   159 00000000 506C6561736520696E-     prompt_msg1  db   "Please input the first number : ",0
   160 00000009 707574207468652066-
   161 00000012 69727374206E756D62-
   162 0000001B 6572203A2000       
   163 00000021 506C6561736520696E-     prompt_msg2  db   "Please input the second  number : ",0
   164 0000002A 707574207468652073-
   165 00000033 65636F6E6420206E75-
   166 0000003C 6D626572203A2000   
   167 00000044 503A2000                prompt_msg3  db   "P: ",0
   168 00000048 5468652073756D2069-     output_msg  db   "The sum is :",0
   169 00000051 73203A00           
   170 00000055 4762                    n1          dw   25159
   171 00000057 333E                    n2          dw   15923
   172 00000059 4E                      ch1         db   'N'
   173                                  .UDATA 
   174                              <1>  segment .bss
   175 00000000 <res 00000004>          number1   resd   1 
   176 00000004 <res 00000004>          number2   resd   1
   177                                  
   178                                  .CODE
   179                              <1>  segment .data
   180                              <1>  segment .bss
   181                              <1>  segment .text
   182                                        .STARTUP
   183                              <1> 
   184                              <1>  global _start
   185                              <1> _start:
   186                                        PutStr  prompt_msg1   ; request first number 
   187 00000000 51                  <1>  push ECX
   188 00000001 B9[00000000]        <1>  mov ECX,%1
   189 00000006 E8(00000000)        <1>  call proc_PutStr
   190 0000000B 59                  <1>  pop ECX
   191                                        GetInt CX             ; CX= first number  
   192                              <1> %ifnidni %1,AX
   193 0000000C 6650                <1>  push AX
   194 0000000E E8(00000000)        <1>  call proc_GetInt
   195 00000013 6689C1              <1>  mov %1,AX
   196 00000016 6658                <1>  pop AX
   197                              <1> %else
   198                              <1>  call proc_GetInt
   199                              <1> %endif
   200                                  
   201                                        PutStr  prompt_msg2   ; request second number 
   202 00000018 51                  <1>  push ECX
   203 00000019 B9[21000000]        <1>  mov ECX,%1
   204 0000001E E8(00000000)        <1>  call proc_PutStr
   205 00000023 59                  <1>  pop ECX
   206                                        GetInt DX             ; DX= second number  
   207                              <1> %ifnidni %1,AX
   208 00000024 6650                <1>  push AX
   209 00000026 E8(00000000)        <1>  call proc_GetInt
   210 0000002B 6689C2              <1>  mov %1,AX
   211 0000002E 6658                <1>  pop AX
   212                              <1> %else
   213                              <1>  call proc_GetInt
   214                              <1> %endif
   215                                   
   216 00000030 6689C8                        mov AX, CX
   217 00000033 6601D0                        add AX, DX      
   218                                        PutStr  output_msg   
   219 00000036 51                  <1>  push ECX
   220 00000037 B9[48000000]        <1>  mov ECX,%1
   221 0000003C E8(00000000)        <1>  call proc_PutStr
   222 00000041 59                  <1>  pop ECX
   223                                        PutInt   AX
   224 00000042 6650                <1>  push AX
   225 00000044 6689C0              <1>  mov AX,%1
   226 00000047 E8(00000000)        <1>  call proc_PutInt
   227 0000004C 6658                <1>  pop AX
   228                                    nwln 
   229 0000004E E8(00000000)        <1>  call proc_nwln
   230                                  done:
   231                                        .EXIT
   232 00000053 B801000000          <1>  mov EAX,1
   233 00000058 31DB                <1>  xor EBX,EBX
   234 0000005A CD80                <1>  int 0x80
   235                                  
   236                                  
   237                                  
   238                                  
   239                                  
   240                                  
   241                                  
