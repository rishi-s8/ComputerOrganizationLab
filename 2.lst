     1                                  %include "io.mac"
     1                              <1> extern   proc_nwln, proc_PutCh, proc_PutStr
     2                              <1> extern   proc_GetStr, proc_GetCh
     3                              <1> extern   proc_PutInt, proc_GetInt
     4                              <1> extern   proc_PutLInt, proc_GetLInt
     5                              <1> 
     6                              <1> ;;-------------------------------------------------------------------
     7                              <1> %macro  .STARTUP  0
     8                              <1> ;group dgroup .data .bss
     9                              <1>         global   _start
    10                              <1> _start:
    11                              <1> %endmacro
    12                              <1> ;;-------------------------------------------------------------------
    13                              <1> 
    14                              <1> 
    15                              <1> ;;-------------------------------------------------------------------
    16                              <1> %macro  .EXIT  0
    17                              <1>         mov    EAX,1
    18                              <1>         xor    EBX,EBX
    19                              <1>         int    0x80
    20                              <1> %endmacro
    21                              <1> ;;-------------------------------------------------------------------
    22                              <1> 
    23                              <1> 
    24                              <1> ;;-------------------------------------------------------------------
    25                              <1> %macro  .DATA 0
    26                              <1>         segment .data
    27                              <1> %endmacro
    28                              <1> ;;-------------------------------------------------------------------
    29                              <1> 
    30                              <1> ;;-------------------------------------------------------------------
    31                              <1> %macro  .UDATA 0
    32                              <1>         segment .bss
    33                              <1> %endmacro
    34                              <1> ;;-------------------------------------------------------------------
    35                              <1> 
    36                              <1> ;;-------------------------------------------------------------------
    37                              <1> %macro  .CODE 0
    38                              <1>         segment .data
    39                              <1>         segment .bss
    40                              <1>         segment .text
    41                              <1> %endmacro
    42                              <1> ;;-------------------------------------------------------------------
    43                              <1> 
    44                              <1> 
    45                              <1> ;;-------------------------------------------------------------------
    46                              <1> %macro  nwln  0 
    47                              <1>         call    proc_nwln
    48                              <1> %endmacro
    49                              <1> ;;-------------------------------------------------------------------
    50                              <1> 
    51                              <1> 
    52                              <1> ;;-------------------------------------------------------------------
    53                              <1> %macro  PutCh  1 
    54                              <1>         push    AX
    55                              <1>         mov     AL,%1
    56                              <1>         call    proc_PutCh
    57                              <1>         pop     AX
    58                              <1> %endmacro
    59                              <1> ;;-------------------------------------------------------------------
    60                              <1> 
    61                              <1> 
    62                              <1> ;;-------------------------------------------------------------------
    63                              <1> %macro  PutStr  1 
    64                              <1>         push    ECX
    65                              <1>         mov     ECX,%1
    66                              <1>         call    proc_PutStr
    67                              <1>         pop     ECX
    68                              <1> %endmacro
    69                              <1> ;;-------------------------------------------------------------------
    70                              <1> 
    71                              <1> 
    72                              <1> ;;-------------------------------------------------------------------
    73                              <1> %macro  GetStr  1-2 81
    74                              <1>         push    ESI
    75                              <1>         push    EDI
    76                              <1>         mov     EDI,%1
    77                              <1>         mov     ESI,%2
    78                              <1>         call    proc_GetStr
    79                              <1>         pop     EDI
    80                              <1>         pop     ESI
    81                              <1> %endmacro
    82                              <1> ;;-------------------------------------------------------------------
    83                              <1> 
    84                              <1> 
    85                              <1> ;;-------------------------------------------------------------------
    86                              <1> %macro  GetCh   1
    87                              <1>         push    SI
    88                              <1>         xor     SI,SI
    89                              <1> %ifidni %1,AL
    90                              <1>         ;inc     SI
    91                              <1>         call    proc_GetCh
    92                              <1> %elifidni %1,AH
    93                              <1>         mov     SI,1
    94                              <1>         call    proc_GetCh
    95                              <1> %else
    96                              <1>         push    AX
    97                              <1>         call    proc_GetCh
    98                              <1>         mov     %1,AL
    99                              <1>         pop     AX
   100                              <1> %endif
   101                              <1>         pop     SI
   102                              <1> %endmacro
   103                              <1> ;;-------------------------------------------------------------------
   104                              <1> 
   105                              <1> 
   106                              <1> ;;-------------------------------------------------------------------
   107                              <1> %macro  PutInt  1
   108                              <1>         push    AX
   109                              <1>         mov     AX,%1
   110                              <1>         call    proc_PutInt
   111                              <1>         pop     AX
   112                              <1> %endmacro
   113                              <1> ;;-------------------------------------------------------------------
   114                              <1> 
   115                              <1> 
   116                              <1> ;;-------------------------------------------------------------------
   117                              <1> %macro  GetInt  1
   118                              <1> %ifnidni %1,AX
   119                              <1>         push    AX
   120                              <1>         call    proc_GetInt
   121                              <1>         mov     %1,AX
   122                              <1> 	  pop     AX
   123                              <1> %else 
   124                              <1>         call  proc_GetInt
   125                              <1> %endif
   126                              <1> %endmacro
   127                              <1> ;;-------------------------------------------------------------------
   128                              <1> 
   129                              <1> ;;-------------------------------------------------------------------
   130                              <1> %macro  PutLInt  1
   131                              <1>         push    EAX
   132                              <1>         mov     EAX,%1
   133                              <1>         call    proc_PutLInt
   134                              <1>         pop     EAX
   135                              <1> %endmacro
   136                              <1> ;;-------------------------------------------------------------------
   137                              <1> 
   138                              <1> ;;-------------------------------------------------------------------
   139                              <1> %macro  GetLInt  1
   140                              <1> %ifnidni %1,EAX
   141                              <1>         push    EAX
   142                              <1>         call    proc_GetLInt
   143                              <1>         mov     %1,EAX
   144                              <1> 	  pop     EAX
   145                              <1> %else 
   146                              <1>         call  proc_GetLInt
   147                              <1> %endif
   148                              <1> %endmacro
   149                              <1> ;;-------------------------------------------------------------------
   150                              <1> 
     2                                  
     3                                  .DATA
     3                              <1>  segment .data
     4 00000000 4E756D626572206F66-     	prompt_1	 	db	"Number of students: ", 0
     4 00000009 2073747564656E7473-
     4 00000012 3A2000             
     5 00000015 4E756D626572206F66-     	prompt_2		db	"Number of subjects: ", 0
     5 0000001E 207375626A65637473-
     5 00000027 3A2000             
     6 0000002A 456E746572206E6578-     	prompt_3		db	"Enter next roll no: ", 0
     6 00000033 7420726F6C6C206E6F-
     6 0000003C 3A2000             
     7 0000003F 456E746572206D6172-     	prompt_4		db	"Enter marks for all students in subject ",0
     7 00000048 6B7320666F7220616C-
     7 00000051 6C2073747564656E74-
     7 0000005A 7320696E207375626A-
     7 00000063 6563742000         
     8 00000068 0000                    	count			dw	0
     9 0000006A 53747564656E742000      	subject			db	"Student ", 0
    10 00000073 3A2000                  	colon 			db	": ", 0
    11                                  
    12                                  .UDATA	
    12                              <1>  segment .bss
    13 00000000 <res 00000001>          	N 				resb	1
    14 00000001 <res 00000001>          	M				resb	1
    15 00000002 <res 000007D0>          	student_list	resw	1000
    16 000007D2 <res 000007D0>          	sub_list		resw	1000
    17                                  
    18                                  .CODE
    18                              <1>  segment .data
    18                              <1>  segment .bss
    18                              <1>  segment .text
    19                                  	.STARTUP
    19                              <1> 
    19                              <1>  global _start
    19                              <1> _start:
    20                                  	PutStr prompt_1
    20 00000000 51                  <1>  push ECX
    20 00000001 B9[00000000]        <1>  mov ECX,%1
    20 00000006 E8(00000000)        <1>  call proc_PutStr
    20 0000000B 59                  <1>  pop ECX
    21                                  	GetInt [N]
    21                              <1> %ifnidni %1,AX
    21 0000000C 6650                <1>  push AX
    21 0000000E E8(00000000)        <1>  call proc_GetInt
    21 00000013 66A3[00000000]      <1>  mov %1,AX
    21 00000019 6658                <1>  pop AX
    21                              <1> %else
    21                              <1>  call proc_GetInt
    21                              <1> %endif
    22 0000001B 66A1[00000000]          	mov AX, [N]
    23                                  	PutStr prompt_2
    23 00000021 51                  <1>  push ECX
    23 00000022 B9[15000000]        <1>  mov ECX,%1
    23 00000027 E8(00000000)        <1>  call proc_PutStr
    23 0000002C 59                  <1>  pop ECX
    24                                  	GetInt DX
    24                              <1> %ifnidni %1,AX
    24 0000002D 6650                <1>  push AX
    24 0000002F E8(00000000)        <1>  call proc_GetInt
    24 00000034 6689C2              <1>  mov %1,AX
    24 00000037 6658                <1>  pop AX
    24                              <1> %else
    24                              <1>  call proc_GetInt
    24                              <1> %endif
    25 00000039 B9[02000000]            	mov ECX, student_list
    26 0000003E 668B1D[68000000]        	mov BX, [count]
    27                                  roll_input:
    28                                  	PutStr prompt_3
    28 00000045 51                  <1>  push ECX
    28 00000046 B9[2A000000]        <1>  mov ECX,%1
    28 0000004B E8(00000000)        <1>  call proc_PutStr
    28 00000050 59                  <1>  pop ECX
    29                                  	GetStr ECX, 7
    29 00000051 56                  <1>  push ESI
    29 00000052 57                  <1>  push EDI
    29 00000053 89CF                <1>  mov EDI,%1
    29 00000055 BE07000000          <1>  mov ESI,%2
    29 0000005A E8(00000000)        <1>  call proc_GetStr
    29 0000005F 5F                  <1>  pop EDI
    29 00000060 5E                  <1>  pop ESI
    30                                  	nwln
    30 00000061 E8(00000000)        <1>  call proc_nwln
    31 00000066 83C107                  	Add ECX, 7
    32 00000069 6683C301                	Add BX, 1
    33 0000006D 6639C3                  	cmp BX, AX
    34 00000070 7CD3                    	jl roll_input
    35                                   
    36                                  
    37 00000072 B9[D2070000]            mov ECX, sub_list
    38                                  
    39 00000077 6640                    inc AX
    40                                  marks_input:
    41 00000079 6648                    	dec AX
    42 0000007B 668B1D[68000000]        	mov BX, [count]
    43 00000082 6683F800                	cmp AX, 0
    44 00000086 0F8481000000            	je done
    45                                  
    46                                  PutStr prompt_4
    46 0000008C 51                  <1>  push ECX
    46 0000008D B9[3F000000]        <1>  mov ECX,%1
    46 00000092 E8(00000000)        <1>  call proc_PutStr
    46 00000097 59                  <1>  pop ECX
    47                                  PutInt AX
    47 00000098 6650                <1>  push AX
    47 0000009A 6689C0              <1>  mov AX,%1
    47 0000009D E8(00000000)        <1>  call proc_PutInt
    47 000000A2 6658                <1>  pop AX
    48                                  nwln
    48 000000A4 E8(00000000)        <1>  call proc_nwln
    49                                  take_input:	
    50 000000A9 6643                    	inc BX
    51                                  	PutStr subject
    51 000000AB 51                  <1>  push ECX
    51 000000AC B9[6A000000]        <1>  mov ECX,%1
    51 000000B1 E8(00000000)        <1>  call proc_PutStr
    51 000000B6 59                  <1>  pop ECX
    52                                  	PutInt BX
    52 000000B7 6650                <1>  push AX
    52 000000B9 6689D8              <1>  mov AX,%1
    52 000000BC E8(00000000)        <1>  call proc_PutInt
    52 000000C1 6658                <1>  pop AX
    53                                  	PutStr colon
    53 000000C3 51                  <1>  push ECX
    53 000000C4 B9[73000000]        <1>  mov ECX,%1
    53 000000C9 E8(00000000)        <1>  call proc_PutStr
    53 000000CE 59                  <1>  pop ECX
    54                                  	GetInt CX	
    54                              <1> %ifnidni %1,AX
    54 000000CF 6650                <1>  push AX
    54 000000D1 E8(00000000)        <1>  call proc_GetInt
    54 000000D6 6689C1              <1>  mov %1,AX
    54 000000D9 6658                <1>  pop AX
    54                              <1> %else
    54                              <1>  call proc_GetInt
    54                              <1> %endif
    55 000000DB 6683C102                	Add CX, 2
    56 000000DF 663B1D[00000000]        	cmp BX, [N]
    57 000000E6 7CC1                    	jl take_input
    58 000000E8 748F                    	je marks_input
    59                                  
    60                                  
    61 000000EA B9[02000000]            mov ECX ,student_list
    62 000000EF 66BB0000                mov BX, word 0
    63                                  repeat:
    64 000000F3 6639C3                  	cmp BX, AX
    65 000000F6 7415                    	je done
    66                                  	PutStr ECX
    66 000000F8 51                  <1>  push ECX
    66 000000F9 89C9                <1>  mov ECX,%1
    66 000000FB E8(00000000)        <1>  call proc_PutStr
    66 00000100 59                  <1>  pop ECX
    67                                  	nwln
    67 00000101 E8(00000000)        <1>  call proc_nwln
    68 00000106 6643                    	inc BX
    69 00000108 83C107                  	add ECX, 7
    70 0000010B EBE6                    	jmp repeat
    71                                  
    72                                  
    73                                  done:
    74                                  	.EXIT
    74 0000010D B801000000          <1>  mov EAX,1
    74 00000112 31DB                <1>  xor EBX,EBX
    74 00000114 CD80                <1>  int 0x80
    75                                  	
